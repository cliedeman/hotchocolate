schema {
  query: Query
}

"Information about the offset pagination."
type CollectionSegmentInfo {
  "Indicates whether more items exist following the set defined by the clients arguments."
  hasNextPage: Boolean! @cacheControl(inheritMaxAge: true)
  "Indicates whether more items exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean! @cacheControl(inheritMaxAge: true)
}

type NestedType {
  taskField: String! @cacheControl(maxAge: 0)
  valueTaskField: String! @cacheControl(maxAge: 0)
  executableField: [String!]! @cacheControl(maxAge: 0)
  queryableField: [String!]! @cacheControl(maxAge: 0)
  queryableFieldWithConnection("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String): QueryableFieldWithConnectionConnection @cacheControl(maxAge: 0)
  queryableFieldWithCollectionSegment(skip: Int take: Int): StringCollectionSegment @cacheControl(maxAge: 0)
  pureField: String! @cacheControl(inheritMaxAge: true)
}

"Information about pagination in a connection."
type PageInfo {
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean! @cacheControl(inheritMaxAge: true)
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean! @cacheControl(inheritMaxAge: true)
  "When paginating backwards, the cursor to continue."
  startCursor: String @cacheControl(inheritMaxAge: true)
  "When paginating forwards, the cursor to continue."
  endCursor: String @cacheControl(inheritMaxAge: true)
}

type Query {
  taskField: String! @cacheControl(maxAge: 0)
  valueTaskField: String! @cacheControl(maxAge: 0)
  executableField: [String!]! @cacheControl(maxAge: 0)
  queryableField: [String!]! @cacheControl(maxAge: 0)
  queryableFieldWithConnection("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String): QueryableFieldWithConnectionConnection @cacheControl(maxAge: 0)
  queryableFieldWithCollectionSegment(skip: Int take: Int): StringCollectionSegment @cacheControl(maxAge: 0)
  nested: NestedType! @cacheControl(maxAge: 0)
  pureField: String! @cacheControl(maxAge: 0)
}

"A connection to a list of items."
type QueryableFieldWithConnectionConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [QueryableFieldWithConnectionEdge!]
  "A flattened list of the nodes."
  nodes: [String!] @cacheControl(inheritMaxAge: true)
}

"An edge in a connection."
type QueryableFieldWithConnectionEdge {
  "A cursor for use in pagination."
  cursor: String! @cacheControl(inheritMaxAge: true)
  "The item at the end of the edge."
  node: String! @cacheControl(inheritMaxAge: true)
}

type StringCollectionSegment {
  items: [String!] @cacheControl(inheritMaxAge: true)
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
}

"TODO"
enum CacheControlScope {
  "TODO"
  PUBLIC
  "TODO"
  PRIVATE
}

"TODO"
directive @cacheControl("TODO" maxAge: Int "TODO" scope: CacheControlScope "TODO" inheritMaxAge: Boolean) on OBJECT | FIELD_DEFINITION | INTERFACE | UNION

"The `@defer` directive may be provided for fragment spreads and inline fragments to inform the executor to delay the execution of the current fragment to indicate deprioritization of the current fragment. A query with `@defer` directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred is delivered in a subsequent response. `@include` and `@skip` take precedence over `@defer`."
directive @defer("If this argument label has a value other than null, it will be passed on to the result of this defer directive. This label is intended to give client applications a way to identify to which fragment a deferred result belongs to." label: String "Deferred when true." if: Boolean) on FRAGMENT_SPREAD | INLINE_FRAGMENT

"The `@stream` directive may be provided for a field of `List` type so that the backend can leverage technology such as asynchronous iterators to provide a partial list in the initial response, and additional list items in subsequent responses. `@include` and `@skip` take precedence over `@stream`."
directive @stream("If this argument label has a value other than null, it will be passed on to the result of this stream directive. This label is intended to give client applications a way to identify to which fragment a streamed result belongs to." label: String "The initial elements that shall be send down to the consumer." initialCount: Int! = 0 "Streamed when true." if: Boolean) on FIELD
