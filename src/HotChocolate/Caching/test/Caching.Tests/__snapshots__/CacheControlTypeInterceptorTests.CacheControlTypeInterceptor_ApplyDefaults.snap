schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

interface CachableContract @cacheControl(maxAge: 180) {
  myProperty: Int! @cacheControl(inheritMaxAge: true)
}

interface Contract {
  myProperty: Int! @cacheControl(inheritMaxAge: true)
}

type CachableUser @cacheControl(maxAge: 120) {
  myProperty: Int! @cacheControl(inheritMaxAge: true)
}

type Contract1 implements Contract {
  myProperty: Int! @cacheControl(inheritMaxAge: true)
}

type Contract2 implements Contract {
  myProperty: Int! @cacheControl(inheritMaxAge: true)
}

type Contract3 implements CachableContract {
  myProperty: Int! @cacheControl(inheritMaxAge: true)
}

type Contract4 implements CachableContract {
  myProperty: Int! @cacheControl(inheritMaxAge: true)
}

type Mutation {
  addString: String!
}

type NestedType {
  scalar: String @cacheControl(inheritMaxAge: true)
  scalar_FieldCache: String @cacheControl(maxAge: 500)
  nonNullScalar: String! @cacheControl(inheritMaxAge: true)
  nonNullScalar_FieldCache: String! @cacheControl(maxAge: 500)
  scalarList: [String]! @cacheControl(inheritMaxAge: true)
  scalarList_FieldCache: [String]! @cacheControl(maxAge: 500)
  nonNullScalarList: [String!]! @cacheControl(inheritMaxAge: true)
  nonNullScalarList_FieldCache: [String!]! @cacheControl(maxAge: 500)
  objectType: User! @cacheControl(maxAge: 0)
  objectType_FieldCache: User! @cacheControl(maxAge: 500)
  objectType_TypeCache: CachableUser! @cacheControl(maxAge: 0)
  objectType_FieldCache_TypeCache: CachableUser! @cacheControl(maxAge: 500)
  interfaceType: Contract! @cacheControl(maxAge: 0)
  interfaceType_FieldCache: Contract! @cacheControl(maxAge: 500)
  interfaceType_TypeCache: CachableContract! @cacheControl(maxAge: 0)
  interfaceType_FieldCache_TypeCache: CachableContract! @cacheControl(maxAge: 500)
  unionType: Post! @cacheControl(maxAge: 0)
  unionType_FieldCache: Post! @cacheControl(maxAge: 500)
  unionType_TypeCache: CachablePost! @cacheControl(maxAge: 0)
  unionType_FieldCache_TypeCache: CachablePost! @cacheControl(maxAge: 500)
}

type PicturePost {
  myProperty: Int! @cacheControl(inheritMaxAge: true)
}

type Query {
  scalar: String @cacheControl(maxAge: 0)
  scalar_FieldCache: String @cacheControl(maxAge: 500)
  nonNullScalar: String! @cacheControl(maxAge: 0)
  nonNullScalar_FieldCache: String! @cacheControl(maxAge: 500)
  scalarList: [String]! @cacheControl(maxAge: 0)
  scalarList_FieldCache: [String]! @cacheControl(maxAge: 500)
  nonNullScalarList: [String!]! @cacheControl(maxAge: 0)
  nonNullScalarList_FieldCache: [String!]! @cacheControl(maxAge: 500)
  objectType: User! @cacheControl(maxAge: 0)
  objectType_FieldCache: User! @cacheControl(maxAge: 500)
  objectType_TypeCache: CachableUser! @cacheControl(maxAge: 0)
  objectType_FieldCache_TypeCache: CachableUser! @cacheControl(maxAge: 500)
  interfaceType: Contract! @cacheControl(maxAge: 0)
  interfaceType_FieldCache: Contract! @cacheControl(maxAge: 500)
  interfaceType_TypeCache: CachableContract! @cacheControl(maxAge: 0)
  interfaceType_FieldCache_TypeCache: CachableContract! @cacheControl(maxAge: 500)
  unionType: Post! @cacheControl(maxAge: 0)
  unionType_FieldCache: Post! @cacheControl(maxAge: 500)
  unionType_TypeCache: CachablePost! @cacheControl(maxAge: 0)
  unionType_FieldCache_TypeCache: CachablePost! @cacheControl(maxAge: 500)
  nested: NestedType! @cacheControl(maxAge: 0)
}

type Subscription {
  onEvent: [String!]!
}

type TextPost {
  myProperty: Int! @cacheControl(inheritMaxAge: true)
}

type User {
  myProperty: Int! @cacheControl(inheritMaxAge: true)
}

union CachablePost @cacheControl(maxAge: 60) = TextPost | PicturePost

union Post = TextPost | PicturePost

"TODO"
enum CacheControlScope {
  "TODO"
  PUBLIC
  "TODO"
  PRIVATE
}

"TODO"
directive @cacheControl("TODO" maxAge: Int "TODO" scope: CacheControlScope "TODO" inheritMaxAge: Boolean) on OBJECT | FIELD_DEFINITION | INTERFACE | UNION

"The `@defer` directive may be provided for fragment spreads and inline fragments to inform the executor to delay the execution of the current fragment to indicate deprioritization of the current fragment. A query with `@defer` directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred is delivered in a subsequent response. `@include` and `@skip` take precedence over `@defer`."
directive @defer("If this argument label has a value other than null, it will be passed on to the result of this defer directive. This label is intended to give client applications a way to identify to which fragment a deferred result belongs to." label: String "Deferred when true." if: Boolean) on FRAGMENT_SPREAD | INLINE_FRAGMENT

"The `@stream` directive may be provided for a field of `List` type so that the backend can leverage technology such as asynchronous iterators to provide a partial list in the initial response, and additional list items in subsequent responses. `@include` and `@skip` take precedence over `@stream`."
directive @stream("If this argument label has a value other than null, it will be passed on to the result of this stream directive. This label is intended to give client applications a way to identify to which fragment a streamed result belongs to." label: String "The initial elements that shall be send down to the consumer." initialCount: Int! = 0 "Streamed when true." if: Boolean) on FIELD
